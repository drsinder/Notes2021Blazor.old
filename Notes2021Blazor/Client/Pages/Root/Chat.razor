@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Authorization
@using Notes2021Blazor.Shared
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@if (string.IsNullOrEmpty(userInput))
{
    <p class="center"><em>Loading...</em></p>
}
else
{
    <AuthorizeView>
        <Authorized Context="Outer">
            <div class="form-group">
                <label for="messageInput">Message:</label>
                <input id="messageInput" class="long-input" @bind="messageInput" />
            </div>
            <button @onclick="Send" disabled="@(!IsConnected)">Send Message</button>

            <hr />

            <ul id="messagesList">
                @foreach (var message in messages)
                {
                    <li>@message</li>
                }
            </ul>
        </Authorized>
        <NotAuthorized>
            You must be logged in to chat.
        </NotAuthorized>
    </AuthorizeView>

}

@code {
    HubConnection hubConnection;
    List<string> messages = new List<string>();
    string userInput;
    string messageInput;

    protected override async Task OnInitializedAsync()
    {
        userInput = (await Http.GetJsonAsync<UserData>("api/User")).DisplayName;


        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = user + " says: " + message;
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        userInput = (await Http.GetJsonAsync<UserData>("api/User")).DisplayName;

        await hubConnection.StartAsync();
    }

    Task Send() => hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
}
