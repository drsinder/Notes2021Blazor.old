@page "/"
@using Notes2021Blazor.Shared
@using Blazored.LocalStorage
@using System.Timers
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService _localStorage
<h2 class="center">Welcome to Notes 2021 Blazor Edition <img src="/favicon.ico" width="32" /></h2>

@if (model == null)
{
    <p class="center"><em>Loading...</em></p>
}
else
{
    <h5 class="center">
        <span id="homepagetime">
            @myTime
        </span>
    </h5>
}

@if (fileList == null || nameList == null)
{
    <p class="center"><em>Loading...</em></p>

}
else
{
    <AuthorizeView>
        <Authorized Context="Outer">
            <div class="row">
                <div class="col-md-3"></div>
                <div class="col-md-4 roundedgrayindexinput keep-center">
                    <EditForm Model="@dummyFile">
                        <p>
                            <label>
                                <strong>Enter a NoteFile Name and press Enter:</strong>
                                <InputText class="form-control short-input keep-center"
                                           ValueChanged="@( (string val) => TextHasChanged(val) )"
                                           Value="@dummyFile.NoteFileName"
                                           ValueExpression="@( () => dummyFile.NoteFileName )"/>
                            </label>
                        </p>
                        or
                        <InputSelect id="fileselect" class="btn btn-file dropdown-toggle form-control short-input"
                                     ValueChanged="@( (int val) => FileHasChanged(val) )"
                                     Value="@dummyFile.Id"
                                     ValueExpression="@( () => dummyFile.Id )">
                            <option value="0">-- Select a file --</option>
                            @foreach (var item in fileList)
                            {
                                <option value=@item.Id>@item.NoteFileName</option>
                            }
                        </InputSelect>
                        <br />or
                        <InputSelect id="nameselect" class="btn btn-title dropdown-toggle form-control short-input"
                                     ValueChanged="@( (int val) => TitleHasChanged(val) )"
                                     Value="@dummyFile.Id"
                                     ValueExpression="@( () => dummyFile.Id )">
                            <option value="0">-- Select a title --</option>
                            @foreach (var item in nameList)
                                {
                                <option value=@item.Id.ToString()>@item.NoteFileTitle</option>
                                }
                         </InputSelect>
                    </EditForm>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
        </NotAuthorized>
    </AuthorizeView>
}

@functions {
    private HomePageModel model;
    private Timer myTimer;
    private string myTime;
    private List<localFile> fileList = new List<localFile>();
    private List<localFile> nameList = new List<localFile>();
    private localFile dummyFile = new localFile { Id = 0, NoteFileName = " ", NoteFileTitle = " " };

    protected override async Task OnInitializedAsync()
    {
        await _localStorage.SetItemAsync("ArchiveId", 0);
        await _localStorage.RemoveItemAsync("IsSearch");

        HomePageModel model1 = await Http.GetJsonAsync<HomePageModel>("api/HomePageData");
        myTime = model1.TimeZone.Local(DateTime.Now.ToUniversalTime()).ToLongTimeString()
            + " " + model1.TimeZone.Abbreviation + " - "
            + model1.TimeZone.Local(DateTime.Now.ToUniversalTime()).ToLongDateString();


        myTimer = new Timer(10000);
        myTimer.Elapsed += OnTimedEvent;
        myTimer.AutoReset = true;
        myTimer.Enabled = true;

        model = model1;

        List<NoteFile> fileList1 = model.NoteFiles.OrderBy(p => p.NoteFileName).ToList();
        List<NoteFile> nameList1 = model.NoteFiles.OrderBy(p => p.NoteFileTitle).ToList();

        for (int i = 0; i < fileList1.Count; i++)
        {
            localFile work = new localFile { Id = fileList1[i].Id, NoteFileName = fileList1[i].NoteFileName, NoteFileTitle = fileList1[i].NoteFileTitle };
            localFile work2 = new localFile { Id = nameList1[i].Id, NoteFileName = nameList1[i].NoteFileName, NoteFileTitle = nameList1[i].NoteFileTitle };
            fileList.Add(work);
            nameList.Add(work2);
        }

    }

    protected void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        myTime = model.TimeZone.Local(DateTime.Now.ToUniversalTime()).ToLongTimeString()
            + " " + model.TimeZone.Abbreviation + " - "
            + model.TimeZone.Local(DateTime.Now.ToUniversalTime()).ToLongDateString();

        this.StateHasChanged();
    }

    private void FileHasChanged(int value)
    {
        myTime = value.ToString();
    }

    private void TitleHasChanged(int value)
    {
        myTime = value.ToString();
    }

    private void TextHasChanged(string value)
    {
        myTime = value;
    }

}

@code { 

    public class localFile
    {
        public int Id { get; set; }
        public string NoteFileName { get; set; }
        public string NoteFileTitle { get; set; }

    }

}
