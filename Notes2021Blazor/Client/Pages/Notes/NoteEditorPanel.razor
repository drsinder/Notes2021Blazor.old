@using Notes2021Blazor.Shared
@using Blazored.LocalStorage
@using System.Net.Http
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text
@using Newtonsoft.Json
@using System.Timers
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService _localStorage
@inject NavigationManager NavigationManager
@inject IModalService Modal
@inject IJSRuntime jsRuntime

<AuthorizeView Roles="User">
    <Authorized Context="Top">
        @if (noteFile == null)
        {
            <p class="center"><em>Loading...</em></p>
        }
        else
        {
            <h2>
                Note Editor - @noteFile.NoteFileName <span>-</span> @noteFile.NoteFileTitle
            </h2>
            <EditForm id="createform" Model="@tvm" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <strong>Subject</strong>
                <InputText id="name" @bind-Value="tvm.MySubject" class="form-control long-input" />
                <strong>Tags</strong>
                <InputText id="title" @bind-Value="tvm.TagLine" class="form-control long-input" />
                <strong>Director Message</strong>
                <InputText id="title" @bind-Value="tvm.DirectorMessage" class="form-control long-input" />
                <strong>Note Body</strong>
                <InputTextArea id="mynote" @bind-Value="tvm.MyNote" class="form-control"></InputTextArea>
                <br /><button type="submit" class="btn btn-info btn-sm">Submit</button> <button type="button" @onclick="CancelEdit" class="btn btn-info btn-sm">Cancel</button>
            </EditForm>
        }
    </Authorized>
    <NotAuthorized>
        Access Denied!
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public NoteDisplayIndexModel Model { get; set; }
    [Parameter] public long BaseNoteId { get; set; }
    [Parameter] public NoteHeader EditHeader { get; set; }
    [Parameter] public NoteContent NoteContent { get; set; }
    [Parameter] public EventCallback<string> OnClick { get; set; }

    private int Id { get; set; }

    private NoteFile noteFile { get; set; }

    private TextViewModel tvm { get; set; }

    private Timer timer { get; set; }

    protected override void OnParametersSet()
    {
        tvm = new TextViewModel();
        tvm.MyNote = "";

        noteFile = Model.noteFile;

        tvm.BaseNoteHeaderID = BaseNoteId;
        tvm.NoteFileID = Id = noteFile.Id;

        if (NoteContent != null && EditHeader != null)
        {
            tvm.MyNote = NoteContent.NoteBody;
            tvm.DirectorMessage = NoteContent.DirectorMessage;
            tvm.MySubject = EditHeader.NoteSubject;
            tvm.NoteHeader = EditHeader;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.InvokeAsync<object>("inittinymce", "");

        if (firstRender)
        {
            timer = new Timer(1000);
            timer.Elapsed += TimerTick;
            timer.Enabled = true;
        }
    }

    protected void TimerTick(Object source, ElapsedEventArgs e)
    {
        timer.Enabled = false;
        jsRuntime.InvokeAsync<object>("tinyfocus", "mynote");
    }

    //protected async Task ShowEditor()
    //{
    //    await jsRuntime.InvokeAsync<object>("inittinymce", "");
    //    StateHasChanged();
    //}

    protected async Task HandleValidSubmit()
    {
        tvm.MyNote = await jsRuntime.InvokeAsync<string>("gettinymcecontent", "");

        if (NoteContent == null || EditHeader == null)  // new note
        {
            var stringContent = new StringContent(JsonConvert.SerializeObject(tvm), Encoding.UTF8, "application/json");

            HttpResponseMessage result = await Http.PostAsync("api/NewBaseNote/", stringContent);

            NoteHeader nh = await Http.GetJsonAsync<NoteHeader>("api/NewBaseNote2/");

            NavigationManager.NavigateTo("notes/enterandshow/" + nh.Id, true);
            return;
        }
        else  // edited note
        {
            tvm.NoteHeader = EditHeader;
            var stringContent = new StringContent(JsonConvert.SerializeObject(tvm), Encoding.UTF8, "application/json");
            HttpResponseMessage result = await Http.PutAsync("api/NewBaseNote/", stringContent);

            NavigationManager.NavigateTo("notes/enterandshow/" + tvm.NoteHeader.Id, true);
            return;
        }
    }

    protected void CancelEdit()
    {
        if (NoteContent == null || EditHeader == null)  // new note
        {
            if (tvm.BaseNoteHeaderID != 0)
                NavigationManager.NavigateTo("notes/enterandshow/" + tvm.BaseNoteHeaderID, true);
            else
                NavigationManager.NavigateTo("notes/main/" + tvm.NoteFileID, true);
        }
        else  // editing
        {
            NavigationManager.NavigateTo("notes/enterandshow/" + EditHeader.Id, true);
        }
        //OnClick.InvokeAsync("CancelEdit");
    }
}

