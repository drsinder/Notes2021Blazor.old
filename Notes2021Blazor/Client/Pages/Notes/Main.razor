@page "/notes/main/{fileId}"
@page "/notes/display/{fileId}"
@page "/notes/enterandshow/{fileId}"
@page "/notes/sequence/"
@using Notes2021Blazor.Shared
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using System.Timers
@using System.Text
@using Newtonsoft.Json
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService _localStorage
@inject NavigationManager NavigationManager
@inject IModalService Modal
@inject IJSRuntime jsRuntime

@if (Model == null)
{
    <p class="center"><em>@message</em></p>
}
else
{
    <AuthorizeView Roles="User">
        <Authorized>
            @if (newnoteFlag)
            {
                <NoteEditorPanel Model="@Model" BaseNoteId=0 OnClick="ClickHandler" />
            }
            else if (mode == -1)
            {

            }
            else if (mode == 0)  // index mode
            {
                @if (!string.IsNullOrEmpty(message))
                {
                    <h3 class="text-center">@message</h3>
                }
                else
                {
                    <IndexHeader Model="@Model" BasenoteCount="@basenoteCount" arcId="@archiveID" />
                    <ListMenu Model="@Model" OnClick="ClickHandler" />
                    <NoteIndex Model="@Model" OnClick="ClickHandler" />
                    <ListMenu Model="@Model" OnClick="ClickHandler" />
                    <div class="arrow1">
                        <div>
                            <EditForm Model="@myInput" Context="EditBox">
                                <div class="form-group">
                                    <InputText id="arrow1" autofocus="@myInput.isAutoFocus" style="width: 7em" @onkeypress="KeyPressed"
                                               ValueChanged="@( (string val) => TextHasChanged(val) )"
                                               Value="@myInput.typedValue"
                                               ValueExpression="@( () => myInput.typedValue )" />
                                </div>
                            </EditForm>
                            <input type="submit" value="Navigate" class="btn btn-sm" /> b# | b#.r#
                        </div>
                    </div>
                }
            }
            else // note display mode
            {
                <DisplayPanel Model="Model" currentHeader="currentHeader" Id="Id" SeqBases="seqBases" trackers="trackers" seqIndx="seqIndex" OnClick="ClickHandler" />
            }
        </Authorized>
        <NotAuthorized>
            <p>Access Denied!</p>
        </NotAuthorized>
    </AuthorizeView>
}

@functions {

    [Parameter]
    public string fileId { get; set; }

    private bool newnoteFlag { get; set; }
    public long headerId { get; set; }
    private int Id { get; set; }
    private int archiveID { get; set; }
    private NoteDisplayIndexModel Model { get; set; }
    private long mode { get; set; }
    private int basenoteCount { get; set; }
    private string message = "Loading...";
    private LocalInput myInput { get; set; }
    private NoteHeader currentHeader { get; set; }
    private string scroller { get; set; }

    private Timer timer { get; set; }

    private List<Sequencer> trackers { get; set; }
    private int seqIndex { get; set; }

    private List<NoteHeader> seqBases { get; set; }

    protected async Task ClickHandler(string newMessage)
    {
        if (newMessage.StartsWith("Done:"))
        {
            mode = 0;
            this.StateHasChanged();
            int nord = int.Parse(newMessage.Substring(5, newMessage.Length - 5));

            if (nord > 1)
                nord--;
            scroller = "Base" + nord;
        }
        else if (newMessage.StartsWith("Note:"))
        {
            string notenum = newMessage.Substring(5, newMessage.Length - 5);
            long newmode = long.Parse(notenum);

            currentHeader = Model.AllNotes.Find(p => p.Id == newmode);

            mode = newmode;
            this.StateHasChanged();
        }
        else if (newMessage == "ListHelp")
        {
            ShowHelp();
        }
        else if (newMessage == "NewBaseNote")
        {
            newnoteFlag = true;
            this.StateHasChanged();
        }
        else if (newMessage == "CancelEdit")
        {
            newnoteFlag = false;
            this.StateHasChanged();
            NavigationManager.NavigateTo((NavigationManager.Uri), true);
        }
        else if (newMessage == "AccessControls")
        {
            EditAccess();
        }
        else if (newMessage == "ListNoteFiles")
        {
            ListFiles();
        }
        else if (newMessage == "SeqFileDone")
        {
            var stringContent = new StringContent(JsonConvert.SerializeObject(trackers[seqIndex]), Encoding.UTF8, "application/json");
            HttpResponseMessage result = await Http.PutAsync("api/Sequencer/", stringContent);

            NavigationManager.NavigateTo("/notes/sequence", true);
        }
        else if (newMessage == "HtmlFromIndex")
            HtmlFromIndex();
        else if (newMessage == "htmlFromIndex")
            htmlFromIndex();
        else if (newMessage == "eXport")
            eXport();
        else if (newMessage == "mailFromIndex")
            mail();

        else
        {
            ShowMessage(newMessage + " Clicked");
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        scroller = string.Empty;
        seqIndex = -1;
        if (NavigationManager.Uri.Contains("/display/"))  // display a note from the main index
        {
            headerId = long.Parse(fileId);
            currentHeader = Model.Notes.Find(p => p.Id == headerId);

            mode = currentHeader.Id;
            this.StateHasChanged();
        }
        if (NavigationManager.Uri.Contains("/main/"))     // show the main index
        {
            Id = int.Parse(fileId);
            archiveID = await _localStorage.GetItemAsync<int>("ArchiveId");

            mode = 0;  // index mode

            myInput = new LocalInput();
            myInput.isAutoFocus = true;

            try
            {
                Model = await Http.GetJsonAsync<NoteDisplayIndexModel>("api/NoteIndex/" + Id + "." + archiveID);
                Model.Notes = Model.AllNotes.Where(p => p.ResponseOrdinal == 0).OrderBy(p => p.NoteOrdinal).ToList();
            }
            catch (Exception ex)
            {
                Model = new NoteDisplayIndexModel { message = ex.Message };
            }

            if (Model == null)
            {
                message = "Model is null";
                return;
            }
            //TEMP

            //ExportViewModel exv = new ExportViewModel();
            //exv.NoteFile = Model.noteFile;

            //string zzz = Id + ".0.0";

            //await Http.GetJsonAsync<List<NoteHeader>>("api/Export/" + zzz );


            if (!string.IsNullOrEmpty(Model.message))
                message = Model.message;

            message = null;

            basenoteCount = Model.Notes.Count;
        }
        if (NavigationManager.Uri.Contains("/enterandshow/")) // load the index data and then display a note
        {
            // fileId is really noteId so use it to get base note header

            long myNoteId = long.Parse(fileId);

            NoteHeader myHeader = await Http.GetJsonAsync<NoteHeader>("api/EnterAndDisplay/" + myNoteId);
            Id = myHeader.NoteFileId;  // we now know the file.  So load it up

            archiveID = await _localStorage.GetItemAsync<int>("ArchiveId");

            myInput = new LocalInput();
            myInput.isAutoFocus = true;

            try
            {
                Model = await Http.GetJsonAsync<NoteDisplayIndexModel>("api/NoteIndex/" + Id + "." + archiveID);
                Model.Notes = Model.AllNotes.Where(p => p.ResponseOrdinal == 0).OrderBy(p => p.NoteOrdinal).ToList();
            }
            catch (Exception ex)
            {
                Model = new NoteDisplayIndexModel { message = ex.Message };
                message = ex.Message;
                return;
            }

            if (Model == null)
            {
                message = "Model is null";
                return;
            }

            if (!string.IsNullOrEmpty(Model.message))
                message = Model.message;

            basenoteCount = Model.Notes.Count;

            currentHeader = myHeader;

            message = null;
            newnoteFlag = false;
            mode = myNoteId;
        }
        if (NavigationManager.Uri.Contains("/sequence"))
        {
            trackers = await Http.GetJsonAsync<List<Sequencer>>("api/sequencer");
            if (trackers == null || trackers.Count < 1)
            {
                message = null;
                NavigationManager.NavigateTo("/", true);
                return;
            }

            await StartFileSequence();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            timer = new Timer(1000);
            timer.Elapsed += TimerTick;
            timer.Enabled = true;
        }
    }

    protected void TimerTick(Object source, ElapsedEventArgs e)
    {
        jsRuntime.InvokeAsync<object>("setfocus", "arrow1");
        if (!string.IsNullOrEmpty(scroller))
        {
            jsRuntime.InvokeAsync<object>("setlocation", scroller);
            scroller = string.Empty;
        }
    }

    protected async Task StartFileSequence()
    {
        seqBases = null;
        while ((++seqIndex < trackers.Count) && (seqBases == null || seqBases.Count == 0))
        {
            await LoadSeqFile();
            if (Model.noteFile.LastEdited < trackers[seqIndex].LastTime)
                continue;
            seqBases = SearchForTrackedBaseNotes(trackers[seqIndex]);
            if (seqBases != null && seqBases.Count > 0)
                break;
        }
        if ((seqIndex >= trackers.Count) || (seqBases == null || seqBases.Count == 0))
        {
            var parameters = new ModalParameters();
            Modal.OnClose += HideDialog;
            mode = -1;
            Modal.Show<Completed>("", parameters);

            return;
        }
        message = null;
        currentHeader = seqBases[0];
        mode = currentHeader.Id;
        StateHasChanged();
    }

    protected async Task LoadSeqFile()
    {
        Sequencer tr = trackers[seqIndex];
        Id = tr.NoteFileId;

        archiveID = 0;

        mode = 0;  // index mode

        myInput = new LocalInput();
        myInput.isAutoFocus = true;

        try
        {
            Model = await Http.GetJsonAsync<NoteDisplayIndexModel>("api/NoteIndex/" + Id + "." + archiveID);
            Model.Notes = Model.AllNotes.Where(p => p.ResponseOrdinal == 0).OrderBy(p => p.NoteOrdinal).ToList();
        }
        catch (Exception ex)
        {
            Model = new NoteDisplayIndexModel { message = ex.Message };
        }

        if (Model == null)
        {
            message = "Model is null";
            return;
        }

        if (!string.IsNullOrEmpty(Model.message))
            message = Model.message;

        message = null;

        basenoteCount = Model.Notes.Count;
    }

    protected List<NoteHeader> SearchForTrackedBaseNotes(Sequencer tr)
    {
        List<NoteHeader> bnh = Model.Notes.Where(p => p.ThreadLastEdited > tr.LastTime).OrderBy(p => p.NoteOrdinal).ToList();
        return bnh;
    }

    protected void ListFiles()
    {
        NavigationManager.NavigateTo("/notes/notesfiles");
    }

    protected void KeyPressed(KeyboardEventArgs eventArgs)
    {
        switch (eventArgs.Key)
        {
            case "Z": ShowHelp(); break;
            case "N":
                if (Model.myAccess.Write)
                {
                    newnoteFlag = true;
                    this.StateHasChanged();
                }
                break;
            case "A":
                if (Model.myAccess.EditAccess)
                {
                    EditAccess();
                }
                break;
            case "a":
                ShowArchive();
                break;
            case "L":
                ListFiles();
                break;
            default:
                //var parameters = new ModalParameters();
                //parameters.Add("Message", eventArgs.Key);
                //var options = new ModalOptions() { HideCloseButton = false };
                //Modal.OnClose += HideDialog;
                //Modal.Show<MessageBox>("", parameters, options);
                break;
        }

    }

    private void TextHasChanged(string typedInput)
    {
        typedInput = typedInput.Trim().Replace("'\n", "").Replace("'\r", "").Trim();

        //if (typedInput == "O" && Model.isMarked && Model.myAccess.ReadAccess)
        //    NavigationManager.NavigateTo("/notes/exportmarked/" + @Model.noteFile.Id);

        int fileId = Model.noteFile.Id;
        int noteOrd = 1;
        if (string.IsNullOrEmpty(typedInput) || string.IsNullOrWhiteSpace(typedInput))
            return;

        if (typedInput.Contains("."))
        {
            string[] splits = typedInput.Split(new[] { '.' });
            if (splits.Length != 2)
            {
                return;
            }
            bool ax = !int.TryParse(splits[0], out noteOrd);
            bool bx = !int.TryParse(splits[1], out var respOrd);
            if (ax || bx)
            {
                return;
            }
            currentHeader = Model.AllNotes.Where(p => p.NoteOrdinal == noteOrd && p.ResponseOrdinal == respOrd).SingleOrDefault();
            if (currentHeader == null)
                return;
            mode = currentHeader.Id;
        }
        else
        {
            if (!int.TryParse(typedInput, out noteOrd))
            {
                return;
            }
            if (noteOrd < 1 || noteOrd > Model.Notes.Count)
            {
                return;
            }

            currentHeader = Model.Notes[noteOrd - 1];
            mode = currentHeader.Id;
        }

        this.StateHasChanged();
    }


    private void Done()
    {
        mode = 0;
        newnoteFlag = false;
        //NavigationManager.NavigateTo("/notes/main/" + Id);
        this.StateHasChanged();
    }

    //private void NoteClicked(MouseEventArgs x)
    //{
    //    string z = x.Button.ToString();
    //    message = "Clicked " + z;
    //    this.StateHasChanged();
    //}


    private void SetFocus()
    {
        message = "SetFocus";
        this.StateHasChanged();
    }

    private void ShowHelp()
    {
        var parameters = new ModalParameters();
        Modal.OnClose += HideDialog;
        Modal.Show<HelpDialog>("", parameters);
    }

    void HideDialog(ModalResult modalResult)
    {
        Modal.OnClose -= HideDialog;
    }

    void ShowArchive()
    {
        if (Model.noteFile.NumberArchives == 0)
            return;
        var parameters = new ModalParameters();
        parameters.Add("NoteFile", Model.noteFile);
        Modal.OnClose += HideDialogArchive;
        timer.Stop();
        Modal.Show<Archives>("", parameters);
    }

    void HideDialogArchive(ModalResult modalResult)
    {
        Modal.OnClose -= HideDialogArchive;
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }


    private void ShowMessage(string message)
    {
        var parameters = new ModalParameters();
        parameters.Add("Message", message);
        Modal.OnClose += HideDialog;
        Modal.Show<MessageBox>("", parameters);
    }

    private void EditAccess()
    {
        var parameters = new ModalParameters();
        parameters.Add("FileId", Id);
        Modal.OnClose += HideDialog;
        Modal.Show<AccessList>("", parameters);
    }

    private void DoExport(bool isHtml, bool isCollapsible, bool isEmail = false, string emailaddr = null)
    {
        var parameters = new ModalParameters();

        ExportViewModel vm = new ExportViewModel();
        vm.ArchiveNumber = archiveID;
        vm.isCollapsible = isCollapsible;
        vm.isDirectOutput = !isEmail;
        vm.isHtml = isHtml;
        vm.NoteFile = Model.noteFile;
        vm.NoteOrdinal = 0;
        vm.Email = emailaddr;

        parameters.Add("ExportViewModel", vm);
        parameters.Add("FileName", Model.noteFile.NoteFileName + (isHtml ? ".html" : ".txt"));

        Modal.OnClose += HideDialog;
        Modal.Show<ExportUtil1>("", parameters);
    }

    private void HtmlFromIndex()
    {
        DoExport(true, true);
    }

    private void htmlFromIndex()
    {
        DoExport(true, false);
    }

    private void eXport()
    {
        DoExport(false, false);
    }

    private void mail()
    {
        timer.Stop();
        var parameters = new ModalParameters();
        Modal.OnClose += HideDialogMail;
        Modal.Show<Email>("", parameters);


        //DoExport(true, true, true, "sinder@illinois.edu");
    }

    void HideDialogMail(ModalResult modalResult)
    {
        Modal.OnClose -= HideDialogMail;

        if (!modalResult.Cancelled)
            DoExport(true, true, true, modalResult.Data.ToString());
    }

    protected class LocalInput
    {
        [StringLength(10)]
        public string typedValue { get; set; }
        public bool isAutoFocus { get; set; }
    }

}
