@page "/notes/main/{fileId}"
@page "/notes/display/{fileId}"
@page "/notes/enterandshow/{fileId}"
@using Notes2021Blazor.Shared
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService _localStorage
@inject NavigationManager NavigationManager
@inject IModalService Modal

@if (Model == null)
{
    <p class="center"><em>@message</em></p>
}
else
{
    <AuthorizeView Roles="User">
        <Authorized>
            @if (mode == 0)  // index mode
            {
                @if (!string.IsNullOrEmpty(message))
                {
                    <h3 class="text-center">@message</h3>
                }
                else
                {
                    <div class="modal-dialog-scrollable">
                        <BlazoredModal />
                    </div>
                     <h3 class="text-center">@Model.noteFile.NoteFileName - @Model.noteFile.NoteFileTitle </h3>
                    <h5>
                        Last Edited - @Model.tZone.Local(@Model.noteFile.LastEdited) @Model.tZone.Abbreviation <span class="keep-right">
                            Base Notes - @basenoteCount&nbsp;&nbsp;&nbsp;&nbsp;
                        </span>
                    </h5>
                    <ListMenu Model="@Model" OnClick="ClickHandler" />
                    <table class="table">
                        <tr>
                            <th>#</th>
                            <th>Subject</th>
                            <th>Writer</th>
                            <th>Date/Time</th>
                            <th>Responses</th>
                            <th></th>
                        </tr>
                        @if (@Model.myAccess.ReadAccess)
                        {
                            string path = Model.rPath;
                            foreach (var item in Model.Notes)
                            {
                                if (true || Model.ExpandOrdinal != item.NoteOrdinal)
                                {
                                    <tr class="noteindex">
                                        <td><a href="/notes/display/@item.Id">@item.NoteOrdinal</a></td>
                                        <td><a href="/notes/display/@item.Id">@item.NoteSubject</a></td>
                                        <td><a href="/notes/display/@item.Id">@item.AuthorName</a></td>
                                        <td><a href="/notes/display/@item.Id">@Model.tZone.Local(@item.CreateDate) @Model.tZone.Abbreviation</a></td>

                                        @if (item.ResponseCount > 0)
                                        {
                                            <td><a href="/notes/display/@item.Id">@item.ResponseCount</a></td>
                                        }
                                        else
                                        {
                                            <td></td>
                                        }
                                        <td>
                                            <a href="/notes/display/@item.Id">View</a>
                                        </td>
                                    </tr>
                                }

                            }
                        }
                    </table>
                    <div class="lower-menu">
                        <ListMenu Model="@Model" OnClick="ClickHandler" />
                    </div>
                    <div class="arrow1">
                        <div>
                            <EditForm Model="@myInput" Context="EditBox">
                                <div class="form-group">
                                    <InputText autofocus="@myInput.isAutoFocus" style="width: 7em"
                                               ValueChanged="@( (string val) => TextHasChanged(val) )"
                                               Value="@myInput.typedValue"
                                               ValueExpression="@( () => myInput.typedValue )" />
                                </div>
                            </EditForm>
                            <input type="submit" value="Navigate" class="btn btn-sm" /> b# | b#.r#
                        </div>
                    </div>
                }
            }
            else // note display mode
            {
                <DisplayPanel Model="Model" currentHeader="currentHeader" Id="Id" OnClick="ClickHandler" />
            }
        </Authorized>
        <NotAuthorized>
            <p>Access Denied!</p>
        </NotAuthorized>
    </AuthorizeView>
}

@functions {

    [Parameter]
    public string fileId { get; set; }

    public long headerId { get; set; }
    private int Id { get; set; }
    private int archiveID { get; set; }
    private NoteDisplayIndexModel Model { get; set; }
    private long mode { get; set; }
    private int basenoteCount { get; set; }
    private string message = "Loading...";
    private LocalInput myInput { get; set; }
    private NoteHeader currentHeader { get; set; }

    void ClickHandler(string newMessage)
    {
        if (newMessage == "Done")
        {
            mode = 0;
            this.StateHasChanged();
        }
        else if (newMessage == "ListHelp")
        {
            ShowHelp();
        }
        else if (newMessage == "NewBaseNote")
        {
            NavigationManager.NavigateTo("/notes/newbasenote/" + @Model.noteFile.Id);
        }
        else
        {
            ShowMessage(newMessage + " Clicked");
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        if (NavigationManager.Uri.Contains("display"))  // display a note from the main index
        {
            headerId = long.Parse(fileId);
            currentHeader = Model.Notes.Find(p => p.Id == headerId);

            mode = currentHeader.Id;
            this.StateHasChanged();
        }
        if (NavigationManager.Uri.Contains("main"))     // show the main index
        {
            Id = int.Parse(fileId);
            archiveID = await _localStorage.GetItemAsync<int>("ArchiveId");

            mode = 0;  // index mode

            myInput = new LocalInput();
            myInput.isAutoFocus = true;

            try
            {
                Model = await Http.GetJsonAsync<NoteDisplayIndexModel>("api/NoteIndex/" + fileId);
            }
            catch (Exception ex)
            {
                Model = new NoteDisplayIndexModel { message = ex.Message };
            }

            if (Model == null)
            {
                message = "Model is null";
                return;
            }

            if (!string.IsNullOrEmpty(Model.message))
                message = Model.message;

            message = null;

            basenoteCount = Model.Notes.Count;
        }
        if (NavigationManager.Uri.Contains("enterandshow")) // load the index data and then display a note
        {
            // fileId is really noteId so use it to get base note header

            long myNoteId = long.Parse(fileId);

            NoteHeader myHeader = await Http.GetJsonAsync<NoteHeader>("api/EnterAndDisplay/" + myNoteId);
            Id = myHeader.NoteFileId;  // we now know the file.  So load it up

            archiveID = await _localStorage.GetItemAsync<int>("ArchiveId");

            myInput = new LocalInput();
            myInput.isAutoFocus = true;

            try
            {
                Model = await Http.GetJsonAsync<NoteDisplayIndexModel>("api/NoteIndex/" + Id);
            }
            catch (Exception ex)
            {
                Model = new NoteDisplayIndexModel { message = ex.Message };
                message = ex.Message;
                return;
            }

            if (Model == null)
            {
                message = "Model is null";
                return;
            }

            if (!string.IsNullOrEmpty(Model.message))
                message = Model.message;

            basenoteCount = Model.Notes.Count;

            currentHeader = myHeader;

            message = null;
            mode = myNoteId;
        }
    }

     private void TextHasChanged(string typedInput)
    {
        typedInput = typedInput.Trim().Replace("'\n", "").Replace("'\r", "").Trim();

        if (typedInput == "Z")
            ShowHelp();
        if (typedInput == "N" && Model.myAccess.Write)
            NavigationManager.NavigateTo("/notes/newbasenote/" + @Model.noteFile.Id);
        if (typedInput == "X" && Model.myAccess.ReadAccess)
            NavigationManager.NavigateTo("/notes/export/" + @Model.noteFile.Id);
        if (typedInput == "H" && Model.myAccess.ReadAccess)
            NavigationManager.NavigateTo("/notes/ashtml/" + @Model.noteFile.Id);
        if (typedInput == "h" && Model.myAccess.ReadAccess)
            NavigationManager.NavigateTo("/notes/ashtmlalt/" + @Model.noteFile.Id);
        if (typedInput == "m" && Model.myAccess.ReadAccess)
            NavigationManager.NavigateTo("/notes/mailfileashtml/" + @Model.noteFile.Id);
        if (typedInput == "S" && Model.myAccess.ReadAccess)
            NavigationManager.NavigateTo("/notes/searchfromindex/" + @Model.noteFile.Id);
        if (typedInput == "M" && Model.myAccess.ReadAccess)
            NavigationManager.NavigateTo("/notes/markmine/" + @Model.noteFile.Id);
        if (typedInput == "O" && Model.isMarked && Model.myAccess.ReadAccess)
            NavigationManager.NavigateTo("/notes/exportmarked/" + @Model.noteFile.Id);


        if (typedInput == "A")
            NavigationManager.NavigateTo("/notes/editaccess/" + @Model.noteFile.Id);


        int fileId = Model.noteFile.Id;
        int noteOrd = 1;
        if (string.IsNullOrEmpty(typedInput) || string.IsNullOrWhiteSpace(typedInput))
            return;

        if (typedInput.Contains("."))
        {
            string[] splits = typedInput.Split(new[] { '.' });
            if (splits.Length != 2)
            {
                return;
            }
            bool ax = !int.TryParse(splits[0], out noteOrd);
            bool bx = !int.TryParse(splits[1], out var respOrd);
            if (ax || bx)
            {
                return;
            }
        }
        else
        {
            if (!int.TryParse(typedInput, out noteOrd))
            {
                return;
            }
            if (noteOrd < 1 || noteOrd > Model.Notes.Count)
            {
                return;
            }

            currentHeader = Model.Notes[noteOrd - 1];
            mode = currentHeader.Id;
        }

        this.StateHasChanged();
    }


    private void Done()
    {
        mode = 0;
        NavigationManager.NavigateTo("/notes/main/" + Id);
        this.StateHasChanged();
    }

    private void NoteClicked(MouseEventArgs x)
    {
        string z = x.Button.ToString();
        message = "Clicked " + z;
        this.StateHasChanged();
    }


    private void SetFocus()
    {
        message = "SetFocus";
        this.StateHasChanged();
    }

    private void ShowHelp()
    {
        var parameters = new ModalParameters();
        Modal.OnClose += HideDialog;
        Modal.Show<HelpDialog>("", parameters);
    }

    void HideDialog(ModalResult modalResult)
    {
        Modal.OnClose -= HideDialog;
    }

    private void ShowMessage(string message)
    {
        var parameters = new ModalParameters();
        parameters.Add("Message", message);
        Modal.OnClose += HideDialog;
        Modal.Show<MessageBox>("", parameters);
    }

    protected class LocalInput
    {
        [StringLength(10)]
        public string typedValue { get; set; }
        public bool isAutoFocus { get; set; }
    }

}
